{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5ce149ca",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the no. of elements: 3\n",
      "21\n",
      "343\n",
      "43\n",
      "1-Quick Sort\n",
      "2-Merge Sort\n",
      "0-Exit\n",
      "Enter your choice-1\n",
      "Sorting using quick sort\n",
      "21\n",
      "43\n",
      "343\n",
      "Enter your choice-2\n",
      "Sorting using merge sort\n",
      "21\n",
      "43\n",
      "343\n",
      "Enter your choice-0\n",
      "Exit\n"
     ]
    }
   ],
   "source": [
    "arr=[]\n",
    "n=int(input(\"Enter the no. of elements: \"))\n",
    "for i in range(0,n):\n",
    "    ele=int(input())\n",
    "    arr.append(ele)\n",
    "\n",
    "\n",
    "def partition(arr,low,high):\n",
    "    i=(low-1)\n",
    "    pivot=arr[high]\n",
    "    \n",
    "    for j in range(low,high):\n",
    "        \n",
    "        if arr[j]<=pivot:\n",
    "            i=i+1\n",
    "            arr[i],arr[j]=arr[j],arr[i]\n",
    "            \n",
    "    arr[i+1],arr[high]=arr[high],arr[i+1]\n",
    "    return(i+1)\n",
    "\n",
    "def quickSort(arr,low,high):\n",
    "    if len(arr)==1:\n",
    "        return arr\n",
    "    if low<high:\n",
    "        pi=partition(arr,low,high)\n",
    "        quickSort(arr,low,pi-1)\n",
    "        quickSort(arr,pi+1,high)\n",
    "        \n",
    "def merge(arr, l, m, r):\n",
    "    n1 = m-l+1\n",
    "    n2 = r-m\n",
    "    \n",
    "    L= [0]*(n1)\n",
    "    R= [0]*(n2)\n",
    "    \n",
    "    for i in range(0,n1):\n",
    "        L[i] = arr[l+i]\n",
    "        \n",
    "    for j in range(0,n2):\n",
    "        R[j] = arr[m+1+j]\n",
    "        \n",
    "    i=0\n",
    "    j=0\n",
    "    k=l\n",
    "    \n",
    "    while i<n1 and j<n2 :\n",
    "        if L[i] <= R[j]:\n",
    "            arr[k] = L[i]\n",
    "            i += 1\n",
    "        else:\n",
    "            arr[k] = R[j]\n",
    "            j += 1\n",
    "        k += 1\n",
    "        \n",
    "    while i<n1:\n",
    "        arr[k] = L[i]\n",
    "        i += 1\n",
    "        k += 1\n",
    "        \n",
    "    while j<n2:\n",
    "        arr[k] = R[j]\n",
    "        j += 1\n",
    "        k += 1\n",
    "            \n",
    "        \n",
    "def mergeSort(arr,l,r):\n",
    "    for i in range(l,r+1):\n",
    "        if l<r:\n",
    "            m=(l+(r-1))//2\n",
    "            mergeSort(arr,l,m)\n",
    "            mergeSort(arr,m+1,r)\n",
    "            merge(arr, l, m, r)\n",
    "        \n",
    "print(\"1-Quick Sort\")\n",
    "print(\"2-Merge Sort\")\n",
    "print(\"0-Exit\")\n",
    "\n",
    "while True:\n",
    "    ch=int(input(\"Enter your choice-\"))\n",
    "    if ch==0:\n",
    "        print(\"Exit\")\n",
    "        break\n",
    "    if ch==1:\n",
    "        print(\"Sorting using quick sort\")\n",
    "        quickSort(arr,0,n-1)\n",
    "        for i in range(n):\n",
    "            print(\"%d\"%arr[i])\n",
    "    if ch==2:\n",
    "        print(\"Sorting using merge sort\")\n",
    "        mergeSort(arr,0,n-1)\n",
    "        for i in range(n):\n",
    "            print(\"%d\"%arr[i])\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e60462bf",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
